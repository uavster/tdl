;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Routines to handle with text fonts generated by FNTHEAD.EXE
;       Coded by Ignacio Mellado Bataller a.k.a. B52 / the D@rkRising
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

.386p
.model flat
.code

public  load_font
public  kill_font
public  get_char_info
public  print_char
public  print_string

INCLUDE pcxread.inc
INCLUDE filesys.inc
INCLUDE alloc.inc

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Loads a font into memory and returns a handle
;
; INPUT  -> DS:EDX -> zero terminated font file (.FNT) name
;
; OUTPUT -> CF = 0 if success
;               EBX = font handle
;           CF = 1 if error
;               EBX = 0         Teknik ;)
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
load_font       proc
        call    ttl_load_file
        jc      error_loading
        push    ebx
        mov     esi,ebx
        add     esi,256*4*2     ; PCX init
        call    get_pcx_info
        add     ecx,4+256*3     ; header buffer + palette
        call    malloc
        pop     esi
        jc      error_loading
        mov     [ebx],esi
        mov     edi,ebx
        add     edi,4
        mov     ecx,file_size
        sub     ecx,256*4*2
        add     esi,256*4*2     ; PCX init
        push    ebx
        call    pcx_decode
        pop     ebx
        jc      error_loading
        clc
        ret
        error_loading:
        xor     ebx, ebx        ; Teknik ;)
        stc                     ; Teknik ;)
        ret
load_font       endp

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Removes a font from memory
;
; INPUT -> EBX = font handle
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
kill_font       proc
        push    ebx
        mov     ebx,[ebx]
        call    free
        pop     ebx
        call    free
        ret
kill_font       endp

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Returns size information from a character of a specified font
;
; INPUT  -> EBX = font handle ; AL = char
;
; OUTPUT -> CF = 0 if char is defined
;               ECX = horizontal size ; EDX = vertical size
;           CF = 1 if char is NOT defined
;               ECX = 0 ; EDX = 0       Teknik ;)
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
get_char_info    proc
        movzx   eax,al
        mov     ebx,[ebx]
        cmp     dword ptr [eax*8+ebx],0FFFFFFFFh
        jnz     char_defined
        cmp     dword ptr [eax*8+ebx+4],0FFFFFFFFh
        jz      char_not_defined
        char_defined:
        movzx   ecx,word ptr [eax*8+ebx+2]
        movzx   edx,word ptr [eax*8+ebx+6]
        clc
        ret

        char_not_defined:
        xor     ecx, ecx        ; Teknik ;)
        xor     edx, edx        ; Teknik ;)
        stc
        ret
get_char_info    endp

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Prints a character in the specified coordinates of a memory buffer
;
; INPUT  -> EBX = font handle ; AL = char to write
;           ECX = X pos. ; EDX = Y pos. ; DS:EDI -> buffer for writting
;           ESI = X size of write buffer
;
; OUTPUT -> CF = 0 if success
;               ECX = X pos. of next char
;               EDX = Y pos. of next char
;           CF = 1 if char is undefined
;               ECX = 0                     Teknik ;)
;               EDX = 0                     Teknik ;)
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
print_char      proc
        mov     char,al
        mov     buffer_x,esi
        movzx   eax,al
        mov     esi,ebx
        mov     ebx,[ebx]
        cmp     dword ptr [eax*8+ebx],-1
        jnz     char_defined2
        cmp     dword ptr [eax*8+ebx+4],-1
        jz      char_not_defined2
        ; el caracter est  en el set
        char_defined2:
        pushad
        mov     esi,ebx
        add     esi,256*8
        call    get_pcx_info
        mov     word ptr x_dimension,ax
        mov     word ptr y_dimension,bx
        popad
        pushad
        movzx   ecx,word ptr [eax*8+ebx]
        movzx   edx,word ptr [eax*8+ebx+2]
        mov     char_xsize,edx
        movzx   edx,word ptr [eax*8+ebx+6]
        movzx   eax,word ptr [eax*8+ebx+4]
        mov     char_ysize,edx
        mul     x_dimension
        add     eax,ecx
        add     esi,eax         ; ESI -> character
        add     esi,4+768       ; + palette
        mov     char_start,esi
        popad
        push    edx ecx
        mov     eax,edx
        mul     buffer_x
        add     eax,ecx
        add     edi,eax
        mov     ebx,char_ysize
        mov     esi,char_start
        put_chary:
                mov     ecx,char_xsize
                cld
                copy_line:
                        mov     al,[esi]
                        or      al,al
                        jz      no_copy_pixel
                                mov     es:[edi],al
                        no_copy_pixel:
                        inc     edi
                        inc     esi
                loop    copy_line
                add     edi,buffer_x
                sub     edi,char_xsize
                add     esi,x_dimension
                sub     esi,char_xsize
        dec     ebx
        jnz     put_chary
        pop     ecx edx
        ; next char position
        add     ecx,char_xsize
        inc     ecx
        clc
        ret
        char_not_defined2:
        xor     ecx, ecx        ; Teknik ;)
        xor     edx, edx        ; Teknik ;)
        stc                     ; Teknik ;)
        ret
char            db ?
x_dimension     dd 0
y_dimension     dd 0
char_start      dd ?
char_xsize      dd ?
char_ysize      dd ?
buffer_x        dd ?
print_char      endp

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Prints an ASCIIZ string in the specified coordinates of a memory buffer
;
; INPUT  -> EBX = font handle ; DS:EAX -> ASCIIZ string to write
;           ECX = X pos ; EDX = Y pos ; DS:EDI -> buffer for writting
;           ESI = X size of write buffer
;
; OUTPUT -> CF = 0 if success
;           CF = 1 if char is undefined
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
print_string    proc
        write_it_all:
                push    eax ebx edi esi
                mov     al,[eax]
                or      al,al
                jz      written
                call    print_char
                pop     esi edi ebx eax
                inc     eax
        jmp     write_it_all
        written:
        pop     esi edi ebx eax
        ret
print_string    endp
end 
